package cs3240.project;

import java.io.IOException;

/**
 * This class simply holds the main
 * method for the project, which runs
 * through the necessary code to generate 
 * a Table-Driven DFA for a specification file,
 * and then identify tokens in a code file.
 *  
 * @author Dilan Manatunga
 *
 */
public class RegexProject {

	/**
	 * The main function that is run when the project is run.
	 * This function must at least have two inputs of the name of 
	 * the specification file and the name of the code file. 
	 * It also takes in optional arguments for the name of the 
	 * file to print the token statistics to, the name of the file to
	 * print the DFA Table to, and the name of the file to print the
	 * minimal DFA Table to. If those arguments are not specified, the 
	 * DFA output file will be called "dfa.txt", and the minimal DFA 
	 * output file will be "minimalDFA.txt".
	 * 
	 * This function first calls a scanner generator to parse the
	 * specification file for Character Classes and Token definitions.
	 * The scanner generator will then return a DFA table to identify
	 * the specified tokens. After the scanner generator has run, the 
	 * function will print out the identified Character Classes and 
	 * their values, the scanner generated DFA table, the minimal DFA
	 * table for the DFA generated by the scanner. It will then take 
	 * the generated minimal DFA table, and pass it to a driver program 
	 * which will then attempt to identify the tokens in the code file.
	 * After the driver has completed running, the function will print 
	 * out a list of the tokens and their identified type (if the
	 * token was identified).
	 * 
	 * @param args a list of command line inputs
	 */
	public static void main(String[] args) {
		System.out.println("Program Start");

		String MiniRE_filename = "";  // The code file name
		// Save the inputed file name to the necessary variable
		switch (args.length) {
			case 1:
				MiniRE_filename = args[0]; break;
			default:
				// Not enough arguments provided
				System.err.println("Please provide a MiniRE code file");
				return;
		}
		
		// Create a scanner generator for the specification file name
		ScannerGen scannerGen = new ScannerGen(MiniRE_filename);
		try {
			System.out.println("Running Scanner Generator...");
			scannerGen.run();  // Run the scanner generator
			System.out.println("Scanner Generation Complete");
		} catch (IOException e) {
			System.err.println("IO Exception has occurred while reading specification file.");
			return;
		} catch (Exception e) {
			System.err.println(e);
			return;
		}
		
		System.out.println("Program End");

	}

}
